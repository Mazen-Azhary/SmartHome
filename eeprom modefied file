#include <EEPROM.h>
#include <ros.h>
#include <Servo.h>
#include <std_msgs/Int32.h> 

#define RED 10
#define Buzzer 2
#define ServoPin 4

Servo myServo;
int pos = 0;
int flag = 0;
int servo1 = 0;
volatile bool isPasswordCorrect = false;
char storedPassword[] = "start"; // Change this to your desired password

ros::NodeHandle nh;

std_msgs::Int32 gas_emergency_msg; 

void servo_on() {
  for (pos = 0; pos <= 90; pos += 1) {
    myServo.write(pos);
    delay(5);
  }
}

void servo_off() {
  myServ.write(0);
  delay(2);
}

void interruptFunction() {
  char receivedPassword[50];
  for (int i = 0; i < EEPROM.length(); i++) {
    receivedPassword[i] = EEPROM.read(i);
  }
  if (strcmp(receivedPassword, storedPassword) == 0) {
    isPasswordCorrect = true;
  }
}

void servoCallback(const std_msgs::Int32& msg) {
  servo1 = msg.data;

  if (servo1 < 15 && flag == 0 ) {
    servo_on();
    delay(1000);
    flag = 1;
   if (servo1 > 15 && flag == 1 ) {
    servo_off();
    delay(1000);
    flag = 0;
  }
}

void gasEmergencyCallback(const std_msgs::Int32& msg) {  
  gas_emergency_msg = msg;
}

ros::Subscriber<std_msgs::Int32> gas_emergency_sub("gas_sensor_reading", &gasEmergencyCallback);  
ros::Subscriber<std_msgs::Int32> servo_sub("ultrasonic", &servoCallback);  

void setup() {
  nh.initNode();
  nh.subscribe(servo_sub);
  nh.subscribe(gas_emergency_sub);

  myServo.attach(ServoPin);

  pinMode(, OUTPUT);
  digitalWrite(RED, LOW);
  pinMode(Buzzer, OUTPUT);  
  digitalWrite(Buzzer, LOW);  

  attachInterrupt(digitalPinToInterrupt(ServoPin), interruptFunction, RISING);
}

void loop() {
  if (gas_emergency_msg.data > 40 && isPasswordCorrect) {  
    digitalWrite(RED, HIGH);
    digitalWrite(Buzzer, HIGH);   
    servo_on();
    delay(10000); 
  } else if (gas_emergency_msg.data > 25) {  
    digitalWrite(RED, LOW);
    digitalWrite(Buzzer, LOW);
  } else {
    digitalWrite(RED, LOW);
    digitalWrite(Buzzer, LOW  }

  delay(1000);
  nh.spinOnce();
}

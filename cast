
#include <ros.h>
#include <std_msgs/Int32.h>
#include <Servo.h>
#include <std_msgs/Int32.h>
#define echo 5
#define trig 6
int measurementTime = 0;
Servo myServo;
int pos = 0;
int flag = 0;
int servo1 = 0;
ros::Subscriber<std_msgs::Int32> servo_sub("/ldr_data", &servoCallback);
std_msgs::Int32 servo_msg;
void servoCallback(const std_msgs::Int32& msg)
{
  servo1 = msg.data;
  Serial.println("Let's start");

  if (servo1 < 100 && flag == 0)
  {
    servo_on();
    delay(1000);
    flag = 1;
  }

  if (servo1 > 100 && flag == 1)
  {
    servo_off();
    delay(1000);
    flag = 0;
  }
}
void servo_on() {
  for (pos = 0; pos <= 90; pos += 1) {
    myServo.write(pos);
    delay(5);
  }
  for (pos = 90; pos >= 0; pos -= 1) {
    myServo.write(pos);
    delay(2);
  }
}

void servo_off() {
  myServo.write(0);
  delay(2);
}



float dist = 0;

ros::NodeHandle nh;

std_msgs::Int32 msg;
ros::Publisher ultrasonic("ultrasonic", &msg);

void setup()
{
  nh.initNode();
  nh.advertise(ultrasonic);
  Serial.begin(9600);
  pinMode(trig, OUTPUT);
  pinMode(echo, INPUT);
   myServo.attach(4);
  nh.initNode();
  nh.subscribe(servo_sub);
}

void ultrasonic_sensor()
{
  digitalWrite(trig, LOW);
  delayMicroseconds(2);
  digitalWrite(trig, HIGH);
  delayMicroseconds(10);
  digitalWrite(trig, LOW);
  measurementTime = pulseIn(echo, HIGH);
  dist = measurementTime * 0.034 / 2;
  Serial.print("Distance: ");
  Serial.print(dist);
  Serial.println(" cm");
}

void loop()
{
  ultrasonic_sensor();
  msg.data = dist;
  ultrasonic.publish(&msg);
  nh.spinOnce();
  delay(1000);
}
